import 'package:flutter/material.dart';

class ElevatedScreen extends StatefulWidget {
  const ElevatedScreen({super.key});

  @override
  State<ElevatedScreen> createState() => _ElevatedScreenState();
}

class _ElevatedScreenState extends State<ElevatedScreen> {
  final List<Map<String, String>> properties = [
    {"autofocus": "Seleciona o bot√£o como foco inicial automaticamente"},
    {"clipBehavior": "Define como o conte√∫do ser√° cortado"},
    {"enabled": "Indica se o bot√£o est√° habilitado"},
    {"focusNode": "Permite usar um foco personalizado"},
    {"iconAlignment": "Controla o alinhamento de √≠cones"},
    {"isSemanticButton": "Define se ser√° tratado como bot√£o sem√¢ntico"},
    {"onFocusChange": "Callback quando o foco muda"},
    {"onHover": "Callback ao passar o mouse"},
    {"onLongPress": "Callback ao pressionar e segurar"},
    {"onPressed": "Callback ao clicar (a√ß√£o principal)"},
    {"statesController": "Gerencia o estado interativo do bot√£o"},
    {"style": "Personaliza apar√™ncia: cor, forma, tamanho etc."},
    {"tooltip": "Texto ao passar o mouse"},
  ];

  final List<String> methods = [
    "createState() ‚Üí cria o estado do bot√£o",
    "defaultStyleOf(context) ‚Üí estilo padr√£o baseado no tema",
    "themeStyleOf(context) ‚Üí estilo definido no ElevatedButtonTheme",
    "toString(), toStringDeep() ‚Üí debug e diagn√≥stico",
  ];

  final List<String> staticMethods = [
    "styleFrom() ‚Üí estilo r√°pido com cor, shape, padding etc.",
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text("Exemplos de ElevatedButton"),
      ),
      body: SingleChildScrollView(
        padding: EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            Text("üìå Propriedades",
                style: Theme.of(context).textTheme.titleLarge),
            ...properties.map((prop) {
              final key = prop.keys.first;
              final value = prop.values.first;
              return ListTile(
                title: Text(key),
                subtitle: Text(value),
                leading: Icon(Icons.code),
              );
            }),
            Divider(),
            Text("üì¶ M√©todos", style: Theme.of(context).textTheme.titleLarge),
            ...methods.map((m) => ListTile(
                  title: Text(m),
                  leading: Icon(Icons.functions),
                )),
            Divider(),
            Text("üõ†Ô∏è M√©todos Est√°ticos",
                style: Theme.of(context).textTheme.titleLarge),
            ...staticMethods.map((m) => ListTile(
                  title: Text(m),
                  leading: Icon(Icons.build),
                )),
            Divider(thickness: 2),

            Text("üß™ Exemplos pr√°ticos",
                style: Theme.of(context).textTheme.titleLarge),
            SizedBox(height: 16),

            // 1. Bot√£o b√°sico
            Text("1. B√°sico"),
            ElevatedButton(
              onPressed: () {},
              child: Text("Clique aqui"),
            ),
            SizedBox(height: 16),

            // 2. Bot√£o com estilo personalizado
            Text("2. Com cor de fundo e texto"),
            ElevatedButton(
              onPressed: () {},
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.green,
                foregroundColor: Colors.white,
              ),
              child: Text("Salvar"),
            ),
            SizedBox(height: 16),

            // 3. Bot√£o com bordas arredondadas
            Text("3. Bordas arredondadas"),
            ElevatedButton(
              onPressed: () {},
              style: ElevatedButton.styleFrom(
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(20),
                ),
              ),
              child: Text("Perfil"),
            ),
            SizedBox(height: 16),

            // 4. Bot√£o com tamanho fixo
            Text("4. Tamanho fixo"),
            SizedBox(
              width: 200,
              height: 50,
              child: ElevatedButton(
                onPressed: () {},
                child: Text("Dimens√µes fixas"),
              ),
            ),
            SizedBox(height: 16),

            // 5. Bot√£o com √≠cone
            Text("5. Com √≠cone"),
            ElevatedButton.icon(
              onPressed: () {},
              icon: Icon(Icons.send),
              label: Text("Enviar"),
            ),
            SizedBox(height: 16),

            // 6. Bot√£o desabilitado
            Text("6. Desabilitado (onPressed null)"),
            ElevatedButton(
              onPressed: null,
              child: Text("Indispon√≠vel"),
            ),
            SizedBox(height: 16),

            // 7. Bot√£o com sombra
            Text("7. Com sombra e eleva√ß√£o"),
            ElevatedButton(
              onPressed: () {},
              style: ElevatedButton.styleFrom(
                elevation: 8,
                shadowColor: Colors.black,
              ),
              child: Text("Com sombra"),
            ),
            SizedBox(height: 16),

            // 8. Bot√£o com padding interno customizado
            Text("8. Padding interno"),
            ElevatedButton(
              onPressed: () {},
              style: ElevatedButton.styleFrom(
                padding: EdgeInsets.symmetric(horizontal: 32, vertical: 20),
              ),
              child: Text("Espa√ßado"),
            ),
            SizedBox(height: 16),

            // 9. Bot√£o com borda colorida
            Text("9. Borda customizada"),
            ElevatedButton(
              onPressed: () {},
              style: ElevatedButton.styleFrom(
                side: BorderSide(color: Colors.red, width: 2),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(8),
                ),
              ),
              child: Text("Com borda"),
            ),
            SizedBox(height: 16),
          ],
        ),
      ),
    );
  }
}
